{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;AAMA,SAAS,gCAAU,CAAC,YAAkC,GAAG;IAAE,QAAQ,EAAE,EAAE;CAAE,EAAE;IAC1E,MAAM,CAAC,aAAa,EAAE,cAAc,CAAC,GAAG,qBAAQ,CAAU,KAAK,CAAC,AAAC;IAEjE,IAAI,EATL,SASO,OAAO,CAAA,EAAE,GAAG,0CAAa,EAAE,AAAC;IAElC,MAAM,QAAQ,GAAG,YAAY,CAAC,QAAQ,AAAC;IACvC,MAAM,UAAU,GAAG,UAAY;QAC9B,IAAI,OAAO,CAAC,IAAI,KAAK,oCAAO,CAAC,OAAO;aAE7B,IAAI,OAAO,CAAC,IAAI,KAAK,oCAAO,CAAC,OAAO,EAC1C,uBAAU,EAAE,CAAC,GAAG,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QAG7C,MAAM,YAAY,GAAG,MAAM,uBAAU,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,AAAC;QACvD,IAAI,OAAO,YAAY,KAAK,WAAW,EACtC,cAAc,CAAC,IAAI,CAAC,CAAC;aAErB,cAAc,CAAC,KAAK,CAAC,CAAC;KAEvB,AAAC;IAEF,sBAAS,CAAC,IAAM;QACf,UAAU,EAAE,CAAC;KACb,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO;QA/BR,eAgCE,aAAa;KAOb,CAAC;CACF;AAEM,MAAM,yCAAkB,GAAG,8CAAe,CAAC,gCAAU,CAAC,AAAC;AACvD,MAAM,yCAAQ,GAAG,yCAAkB,CAAC,QAAQ,AAAC;AAC7C,SAAS,yCAAQ,GAAG;IAC1B,OAAO,yCAAkB,CAAC,YAAY,EAAE,CAAC;CACzC;;AD9CD;AEAA;;AAIO,MAAM,yCAAQ,GAAiC,CAAC,EAJvD,UAIyD,QAAQ,CAAA,EAJjE,UAImE,QAAQ,CAAA,EAAE,GAAK;IACjF,IAAI,CAAC,QAAQ,EACZ,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;IAE1C,qBAAO,2BAAC,yCAAa;QAAC,YAAY,EAAE;YAAE,QAAQ,EAAE,QAAQ;SAAE;QAR3D,UAQ8D,QAAQ;MAAiB,CAAC;CACvF,AAAC;;;;;","sources":["packages/hyperverse-flow-ft/source/index.ts","packages/hyperverse-flow-ft/source/useToken.ts","packages/hyperverse-flow-ft/source/Provider.tsx","packages/hyperverse-flow-ft/source/types.ts"],"sourcesContent":["export { useToken } from './useToken';\nexport { Provider } from './Provider';\nexport * from './types';\n","import { Network, useHyperverse } from '@decentology/hyperverse';\nimport { useEffect, useState } from 'react';\nimport { createContainer } from '@decentology/unstated-next';\nimport * as actions from './actions';\nconst fcl = require('@onflow/fcl');\n\nfunction TokenState(initialState: { tenantId: string } = { tenantId: '' }) {\n\tconst [isInitialized, setInitialized] = useState<boolean>(false);\n\n\tlet { network } = useHyperverse();\n\n\tconst tenantId = initialState.tenantId;\n\tconst initialize = async () => {\n\t\tif (network.type === Network.Mainnet) {\n\t\t\t// TODO: Deploy to Flow Mainnet.\n\t\t} else if (network.type === Network.Testnet) {\n\t\t\tfcl.config().put('0xToken', 'FILL THIS IN');\n\t\t}\n\n\t\tconst TokenAddress = await fcl.config().get('0xToken');\n\t\tif (typeof TokenAddress !== 'undefined') {\n\t\t\tsetInitialized(true);\n\t\t} else {\n\t\t\tsetInitialized(false);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tinitialize();\n\t}, []);\n\n\treturn {\n\t\tisInitialized,\n\t\t// leaveTribe: actions.leaveTribe.bind(null, tenantId),\n\t\t// getAllTribes: actions.getAllTribes.bind(null, tenantId),\n\t\t// getCurrentTribe: actions.getCurrentTribe.bind(null, tenantId),\n\t\t// joinTribe: actions.joinTribe.bind(null, tenantId),\n\t\t// createTenant: actions.createTenant,\n\t\t// addTribe: actions.addTribe,\n\t};\n}\n\nexport const FlowTokenContainer = createContainer(TokenState);\nexport const Provider = FlowTokenContainer.Provider;\nexport function useToken() {\n\treturn FlowTokenContainer.useContainer();\n}\n","import { HyperverseModuleInstance } from '@decentology/hyperverse';\nimport { FC } from 'react';\nimport { Provider as TokenProvider } from './useToken';\n\nexport const Provider: FC<HyperverseModuleInstance> = ({ children, tenantId }) => {\n\tif (!tenantId) {\n\t\tthrow new Error('Tenant ID is required');\n\t}\n\treturn <TokenProvider initialState={{ tenantId: tenantId }}>{children}</TokenProvider>;\n};\n","type Tail<T extends readonly unknown[]> = T extends readonly [infer _, ...infer Tail] ? Tail : [];\n\nexport type Bind1<Fn extends (...args: any) => any> = (\n\t...args: Tail<Parameters<Fn>>\n) => ReturnType<Fn>;\n\nexport type TribesData = {\n\tname: string;\n\tipfsHash: string;\n\tdescription: string;\n};\n\nexport type FlowTransaction = {\n\terrorMessage: string;\n\tevents: FlowEvent[];\n\tstatus: number;\n\tstatusCode: number;\n};\n\nexport type FlowEvent = {\n\tdata: any;\n\ttype: string;\n\ttransactionId: string;\n\ttransactionIndex: number;\n\teventIndex: number;\n};\n"],"names":[],"version":3,"file":"index.js.map"}